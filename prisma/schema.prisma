generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  name      String
  role      UserRole   @default(GROWER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  plantings Planting[]

  @@map("Users")
}

model Planting {
  id              String         @id @default(uuid())
  
  // Legacy field for backward compatibility
  plantName       String?        // Will be deprecated in favor of plantType.name
  
  // Core planting data
  datePlanted     DateTime
  expectedHarvest DateTime?
  domeDate        DateTime?
  lightDate       DateTime?
  quantity        Int?
  
  // Status tracking
  status          PlantingStatus @default(PLANTED)
  
  // Legacy yield field (deprecated - use Harvest model)
  yield           Float?
  
  // Notes and metadata
  notes           String?
  trayNumber      String?        // Physical location identifier

  // Growing conditions (new fields)
  substrate       String?        // Type of substrate used (zeolite, peat+perlite, compost, etc)
  irrigationMl    Int?           // Milliliters of irrigation applied
  soakingHours    Int?           // Hours of seed soaking before planting (null = no soaking)
  
  // Audit
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
  
  // Relations
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  
  plantTypeId     String?        // Optional for migration compatibility
  plantType       PlantType?     @relation(fields: [plantTypeId], references: [id])
  
  harvests        Harvest[]

  @@map("Plantings")
}

enum UserRole {
  ADMIN
  GROWER
  VIEWER
}

enum PlantingStatus {
  PLANTED
  GERMINATING
  GROWING
  READY_TO_HARVEST
  HARVESTED
  FAILED
}

enum HarvestQuality {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

model PlantType {
  id              String   @id @default(uuid())
  name            String   @unique
  scientificName  String?
  category        String?  // "Microgreens", "Herbs", "Leafy Greens"
  description     String?
  
  // Growing parameters
  daysToGerminate Int?
  daysToHarvest   Int?
  optimalTemp     Float?   // Celsius
  optimalHumidity Float?   // Percentage
  lightRequirement String? // "Low", "Medium", "High"
  
  // Business data
  averageYield    Float?   // grams per tray
  marketPrice     Float?   // price per gram
  difficulty      String?  // "Easy", "Medium", "Hard"
  
  // Audit
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
  
  // Relations
  plantings       Planting[]
  
  @@map("PlantTypes")
}

model Harvest {
  id            String         @id @default(uuid())
  
  // Harvest data
  harvestDate   DateTime
  weight        Float          // grams
  quality       HarvestQuality
  notes         String?
  
  // Market data
  pricePerGram  Float?         // Optional pricing data
  totalValue    Float?         // weight * pricePerGram
  
  // Quality metrics
  appearance    Int?           // 1-10 scale
  taste         Int?           // 1-10 scale  
  freshness     Int?           // 1-10 scale
  
  // Audit
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  
  // Relations
  plantingId    String
  planting      Planting       @relation(fields: [plantingId], references: [id], onDelete: Cascade)
  
  @@map("Harvests")
}
